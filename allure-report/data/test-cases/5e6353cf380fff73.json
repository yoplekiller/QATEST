{"uid":"5e6353cf380fff73","name":"유효한 movie_id에 대한 상세 정보 조회 테스트","fullName":"src.tests.api_tests.test_moive_details#test_get_movie_details","historyId":"320ecd1276d9274e33bdc58dd378c196","time":{"start":1745794516964,"stop":1745794517225,"duration":261},"description":"특정 영화 상세 정보 API 테스트","descriptionHtml":"<p>특정 영화 상세 정보 API 테스트</p>\n","status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"movie_id = 27025, expected_title = 'The Godfather'\n\n    @allure.feature(\"영화 목록\")\n    @allure.story(\"영화 상세 정보 API 테스트\")\n    @allure.title(\"유효한 movie_id에 대한 상세 정보 조회 테스트\")\n    @pytest.mark.parametrize([\"movie_id\",\"expected_title\"],[\n            (27025, \"The Godfather\"),\n            (550, \"Fight Club\"),\n            (603, \"The Matrix\"),\n            (157336, \"Interstellar\")\n        ])\n    def test_get_movie_details(movie_id, expected_title):\n        \"\"\"특정 영화 상세 정보 API 테스트\"\"\"\n    \n        endpoint = f\"/movie/{movie_id}\"\n        params = {\n            \"api_key\": API_KEY\n        }\n    \n        response = send_get_request(endpoint, params)\n        data= response.json()\n        attach_response(response)\n    \n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\nsrc/tests/api_tests/test_moive_details.py:28: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"특정 영화 상세 정보 API 테스트","status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"movie_id = 27025, expected_title = 'The Godfather'\n\n    @allure.feature(\"영화 목록\")\n    @allure.story(\"영화 상세 정보 API 테스트\")\n    @allure.title(\"유효한 movie_id에 대한 상세 정보 조회 테스트\")\n    @pytest.mark.parametrize([\"movie_id\",\"expected_title\"],[\n            (27025, \"The Godfather\"),\n            (550, \"Fight Club\"),\n            (603, \"The Matrix\"),\n            (157336, \"Interstellar\")\n        ])\n    def test_get_movie_details(movie_id, expected_title):\n        \"\"\"특정 영화 상세 정보 API 테스트\"\"\"\n    \n        endpoint = f\"/movie/{movie_id}\"\n        params = {\n            \"api_key\": API_KEY\n        }\n    \n        response = send_get_request(endpoint, params)\n        data= response.json()\n        attach_response(response)\n    \n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\nsrc/tests/api_tests/test_moive_details.py:28: AssertionError","steps":[{"name":"API 응답 결과 첨부","time":{"start":1745794517225,"stop":1745794517225,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"2b2449ea6ce3e845","name":"응답 JSON","source":"2b2449ea6ce3e845.json","type":"application/json","size":113}],"parameters":[{"name":"response","value":"<Response [404]>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"feature","value":"영화 목록"},{"name":"story","value":"영화 상세 정보 API 테스트"},{"name":"parentSuite","value":"src.tests.api_tests"},{"name":"suite","value":"test_moive_details"},{"name":"host","value":"fv-az1306-311"},{"name":"thread","value":"3531-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.api_tests.test_moive_details"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_title","value":"'The Godfather'"},{"name":"movie_id","value":"27025"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"5e6353cf380fff73.json","parameterValues":["'The Godfather'","27025"]}