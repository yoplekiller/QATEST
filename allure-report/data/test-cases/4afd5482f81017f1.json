{"uid":"4afd5482f81017f1","name":"유효한 movie_id에 대한 상세 정보 조회 테스트","fullName":"src.tests.api_tests.test_movie_details#test_get_movie_details","historyId":"e6dadb1c98996c56a773c886fcd3fecd","time":{"start":1746238403671,"stop":1746238403766,"duration":95},"description":"특정 영화 상세 정보 API 테스트","descriptionHtml":"<p>특정 영화 상세 정보 API 테스트</p>\n","status":"broken","statusMessage":"requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://api.themoviedb.org/3/movie/27025?api_key=040ab6b57016f82bc6cac7e111efe301","statusTrace":"movie_id = 27025, expected_title = 'The Godfather'\n\n    @allure.feature(\"영화 목록\")\n    @allure.story(\"영화 상세 정보 API 테스트\")\n    @allure.title(\"유효한 movie_id에 대한 상세 정보 조회 테스트\")\n    @pytest.mark.parametrize([\"movie_id\",\"expected_title\"],[\n            (27025, \"The Godfather\"),\n            (550, \"Fight Club\"),\n            (603, \"The Matrix\"),\n            (157336, \"Interstellar\")\n        ])\n    def test_get_movie_details(movie_id, expected_title):\n        \"\"\"특정 영화 상세 정보 API 테스트\"\"\"\n    \n        env = get_current_env()\n        BASE_URL = env[\"base_url\"]\n        API_KEY = env[\"api_key\"]\n    \n        endpoint = f\"/movie/{movie_id}\"\n        params = {\n            \"api_key\": API_KEY\n        }\n    \n>       response = send_get_request(endpoint, params)\n\nsrc/tests/api_tests/test_movie_details.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/api_utils.py:16: in send_get_request\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://api.themoviedb.org/3/movie/27025?api_key=040ab6b57016f82bc6cac7e111efe301\n\nvenv/lib/python3.11/site-packages/requests/models.py:1024: HTTPError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"특정 영화 상세 정보 API 테스트","status":"broken","statusMessage":"requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://api.themoviedb.org/3/movie/27025?api_key=040ab6b57016f82bc6cac7e111efe301","statusTrace":"movie_id = 27025, expected_title = 'The Godfather'\n\n    @allure.feature(\"영화 목록\")\n    @allure.story(\"영화 상세 정보 API 테스트\")\n    @allure.title(\"유효한 movie_id에 대한 상세 정보 조회 테스트\")\n    @pytest.mark.parametrize([\"movie_id\",\"expected_title\"],[\n            (27025, \"The Godfather\"),\n            (550, \"Fight Club\"),\n            (603, \"The Matrix\"),\n            (157336, \"Interstellar\")\n        ])\n    def test_get_movie_details(movie_id, expected_title):\n        \"\"\"특정 영화 상세 정보 API 테스트\"\"\"\n    \n        env = get_current_env()\n        BASE_URL = env[\"base_url\"]\n        API_KEY = env[\"api_key\"]\n    \n        endpoint = f\"/movie/{movie_id}\"\n        params = {\n            \"api_key\": API_KEY\n        }\n    \n>       response = send_get_request(endpoint, params)\n\nsrc/tests/api_tests/test_movie_details.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/api_utils.py:16: in send_get_request\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://api.themoviedb.org/3/movie/27025?api_key=040ab6b57016f82bc6cac7e111efe301\n\nvenv/lib/python3.11/site-packages/requests/models.py:1024: HTTPError","steps":[{"name":"GET 요청 보내기","time":{"start":1746238403672,"stop":1746238403765,"duration":93},"status":"broken","statusMessage":"requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://api.themoviedb.org/3/movie/27025?api_key=040ab6b57016f82bc6cac7e111efe301\n","statusTrace":"  File \"/home/runner/work/QATEST/QATEST/venv/lib/python3.11/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/QATEST/QATEST/utils/api_utils.py\", line 16, in send_get_request\n    response.raise_for_status()\n  File \"/home/runner/work/QATEST/QATEST/venv/lib/python3.11/site-packages/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\n","steps":[{"name":"API 응답 결과 첨부","time":{"start":1746238403765,"stop":1746238403765,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"ae4ea931c92e6dbf","name":"응답 JSON","source":"ae4ea931c92e6dbf.json","type":"application/json","size":113}],"parameters":[{"name":"response","value":"<Response [404]>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"name":"GET 요청 에러","type":"text/plain","size":0}],"parameters":[{"name":"endpoint","value":"'/movie/27025'"},{"name":"params","value":"{'api_key': '040ab6b57016f82bc6cac7e111efe301'}"},{"name":"headers","value":"None"}],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"영화 상세 정보 API 테스트"},{"name":"feature","value":"영화 목록"},{"name":"parentSuite","value":"src.tests.api_tests"},{"name":"suite","value":"test_movie_details"},{"name":"host","value":"fv-az2207-486"},{"name":"thread","value":"2647-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.api_tests.test_movie_details"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_title","value":"'The Godfather'"},{"name":"movie_id","value":"27025"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4afd5482f81017f1.json","parameterValues":["'The Godfather'","27025"]}