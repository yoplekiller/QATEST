{"uid":"fd5d2a2d6fc6700","name":"로그인 후 상품 추가하고 상품이 장바구니에 담겨 있는지 확인","fullName":"src.tests.ui_tests.test_ui_product_add_flow#test_ui_product_add_flow","historyId":"47a9425c62c28bbafe4f074e783c3a22","time":{"start":1755835598634,"stop":1755835623818,"duration":25184},"status":"broken","statusMessage":"FileNotFoundError: [Errno 2] No such file or directory: 'screenshots/cart_error.png'","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bd82e3e32160f36c645954279b4086de\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"로그인 > 상품 추가 > 추가 확인 테스트\")\n    @allure.title(\"로그인 후 상품 추가하고 상품이 장바구니에 담겨 있는지 확인\")\n    def test_ui_product_add_flow(driver):\n        driver.get(\"https://www.kurly.com/main\")\n        driver.maximize_window()\n    \n        # 로그인 단계\n        try:\n            login_button = driver.find_element(By.XPATH, \"//a[contains(text(),'로그인')]\")\n            login_button.click()\n            time.sleep(2)\n    \n            login_username_input = driver.find_element(By.XPATH, \"//input[@placeholder='아이디를 입력해주세요']\")\n            login_password_input = driver.find_element(By.XPATH, \"//input[@placeholder='비밀번호를 입력해주세요']\")\n            login_submit_button = driver.find_element(By.XPATH, \"//button[@type='submit']\")\n    \n            login_username_input.clear()\n            login_password_input.clear()\n    \n            login_username_input.send_keys('dlaaslek')\n            login_password_input.send_keys('!test132456')\n            time.sleep(3)\n            login_submit_button.click()\n            time.sleep(3)\n        except Exception as e:\n            capture_screenshot(driver, \"login_error\")\n            allure.attach.file(\"screenshots/login_error.png\", name=\"로그인 실패\", attachment_type=allure.attachment_type.PNG)\n            pytest.fail(f\"로그인 실패: {e}\")\n    \n        # 상품 검색 단계\n        try:\n            search_box = driver.find_element(By.XPATH, \"//input[@placeholder='검색어를 입력해주세요']\")\n            search_box.send_keys(\"과자\")\n            search_box.send_keys(Keys.RETURN)\n            time.sleep(3)\n        except Exception as e:\n            capture_screenshot(driver, \"search_error\")\n            allure.attach.file(\"screenshots/search_error.png\", name=\"검색 실패\", attachment_type=allure.attachment_type.PNG)\n            pytest.fail(f\"상품 검색 실패: {e}\")\n    \n        # 장바구니 추가 단계\n        try:\n            add_button = driver.find_element(By.XPATH, \"//a[3]//div[2]//button[1]\")\n            add_button.click()\n            time.sleep(4)\n    \n            quantity_up_button = driver.find_element(By.XPATH, \"//button[@aria-label='수량올리기']\")\n            quantity_up_button.click()\n            time.sleep(2)\n    \n            cart_add_button = driver.find_element(By.XPATH, \"//button[@class='css-ahkst0 e4nu7ef3']\")\n            cart_add_button.click()\n            time.sleep(4)\n    \n            cart_button = driver.find_element(By.XPATH, \"//button[@class='css-g25h97 e14oy6dx1']\")\n>           cart_button.click()\n\nsrc/tests/ui_tests/test_ui_product_add_flow.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:402: in _execute\n    return self._parent.execute(command, params)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa246eb8210>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55ff2997f006 \\\\u003Cunknown>\\\\n#22 0x7f52c709caa4 \\\\u003Cunknown>\\\\n#23 0x7f52c7129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1038, 28)\nE         (Session info: chrome=139.0.7258.127)\nE       Stacktrace:\nE       #0 0x55ff2998002a <unknown>\nE       #1 0x55ff2941fa70 <unknown>\nE       #2 0x55ff2947878c <unknown>\nE       #3 0x55ff294765eb <unknown>\nE       #4 0x55ff29473c92 <unknown>\nE       #5 0x55ff294733a7 <unknown>\nE       #6 0x55ff29465b1b <unknown>\nE       #7 0x55ff294973e2 <unknown>\nE       #8 0x55ff2946549a <unknown>\nE       #9 0x55ff294975ae <unknown>\nE       #10 0x55ff294bd14f <unknown>\nE       #11 0x55ff294971b3 <unknown>\nE       #12 0x55ff2946359b <unknown>\nE       #13 0x55ff29464971 <unknown>\nE       #14 0x55ff299451fb <unknown>\nE       #15 0x55ff29948f49 <unknown>\nE       #16 0x55ff2992c2d9 <unknown>\nE       #17 0x55ff29949af8 <unknown>\nE       #18 0x55ff29910bbf <unknown>\nE       #19 0x55ff2996d0b8 <unknown>\nE       #20 0x55ff2996d296 <unknown>\nE       #21 0x55ff2997f006 <unknown>\nE       #22 0x7f52c709caa4 <unknown>\nE       #23 0x7f52c7129c3c <unknown>\n\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bd82e3e32160f36c645954279b4086de\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"로그인 > 상품 추가 > 추가 확인 테스트\")\n    @allure.title(\"로그인 후 상품 추가하고 상품이 장바구니에 담겨 있는지 확인\")\n    def test_ui_product_add_flow(driver):\n        driver.get(\"https://www.kurly.com/main\")\n        driver.maximize_window()\n    \n        # 로그인 단계\n        try:\n            login_button = driver.find_element(By.XPATH, \"//a[contains(text(),'로그인')]\")\n            login_button.click()\n            time.sleep(2)\n    \n            login_username_input = driver.find_element(By.XPATH, \"//input[@placeholder='아이디를 입력해주세요']\")\n            login_password_input = driver.find_element(By.XPATH, \"//input[@placeholder='비밀번호를 입력해주세요']\")\n            login_submit_button = driver.find_element(By.XPATH, \"//button[@type='submit']\")\n    \n            login_username_input.clear()\n            login_password_input.clear()\n    \n            login_username_input.send_keys('dlaaslek')\n            login_password_input.send_keys('!test132456')\n            time.sleep(3)\n            login_submit_button.click()\n            time.sleep(3)\n        except Exception as e:\n            capture_screenshot(driver, \"login_error\")\n            allure.attach.file(\"screenshots/login_error.png\", name=\"로그인 실패\", attachment_type=allure.attachment_type.PNG)\n            pytest.fail(f\"로그인 실패: {e}\")\n    \n        # 상품 검색 단계\n        try:\n            search_box = driver.find_element(By.XPATH, \"//input[@placeholder='검색어를 입력해주세요']\")\n            search_box.send_keys(\"과자\")\n            search_box.send_keys(Keys.RETURN)\n            time.sleep(3)\n        except Exception as e:\n            capture_screenshot(driver, \"search_error\")\n            allure.attach.file(\"screenshots/search_error.png\", name=\"검색 실패\", attachment_type=allure.attachment_type.PNG)\n            pytest.fail(f\"상품 검색 실패: {e}\")\n    \n        # 장바구니 추가 단계\n        try:\n            add_button = driver.find_element(By.XPATH, \"//a[3]//div[2]//button[1]\")\n            add_button.click()\n            time.sleep(4)\n    \n            quantity_up_button = driver.find_element(By.XPATH, \"//button[@aria-label='수량올리기']\")\n            quantity_up_button.click()\n            time.sleep(2)\n    \n            cart_add_button = driver.find_element(By.XPATH, \"//button[@class='css-ahkst0 e4nu7ef3']\")\n            cart_add_button.click()\n            time.sleep(4)\n    \n            cart_button = driver.find_element(By.XPATH, \"//button[@class='css-g25h97 e14oy6dx1']\")\n            cart_button.click()\n            time.sleep(4)\n        except Exception as e:\n            capture_screenshot(driver, \"cart_error\")\n>           allure.attach.file(\"screenshots/cart_error.png\", name=\"장바구니 추가 실패\", attachment_type=allure.attachment_type.PNG)\n\nsrc/tests/ui_tests/test_ui_product_add_flow.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/allure_commons/_allure.py:213: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nvenv/lib/python3.11/site-packages/pluggy/_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nvenv/lib/python3.11/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv/lib/python3.11/site-packages/allure_pytest/listener.py:258: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nvenv/lib/python3.11/site-packages/allure_commons/reporter.py:160: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nvenv/lib/python3.11/site-packages/pluggy/_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nvenv/lib/python3.11/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv/lib/python3.11/site-packages/allure_commons/logger.py:39: in report_attached_file\n    shutil.copy2(source, destination)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/shutil.py:448: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc = 'screenshots/cart_error.png'\ndst = PosixPath('/home/runner/work/QATEST/QATEST/allure-results/a2f03b71-4bef-4509-8089-c8b986d22c96-attachment.png')\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'screenshots/cart_error.png'\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/shutil.py:256: FileNotFoundError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1755835597980,"stop":1755835598634,"duration":654},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"FileNotFoundError: [Errno 2] No such file or directory: 'screenshots/cart_error.png'","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bd82e3e32160f36c645954279b4086de\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"로그인 > 상품 추가 > 추가 확인 테스트\")\n    @allure.title(\"로그인 후 상품 추가하고 상품이 장바구니에 담겨 있는지 확인\")\n    def test_ui_product_add_flow(driver):\n        driver.get(\"https://www.kurly.com/main\")\n        driver.maximize_window()\n    \n        # 로그인 단계\n        try:\n            login_button = driver.find_element(By.XPATH, \"//a[contains(text(),'로그인')]\")\n            login_button.click()\n            time.sleep(2)\n    \n            login_username_input = driver.find_element(By.XPATH, \"//input[@placeholder='아이디를 입력해주세요']\")\n            login_password_input = driver.find_element(By.XPATH, \"//input[@placeholder='비밀번호를 입력해주세요']\")\n            login_submit_button = driver.find_element(By.XPATH, \"//button[@type='submit']\")\n    \n            login_username_input.clear()\n            login_password_input.clear()\n    \n            login_username_input.send_keys('dlaaslek')\n            login_password_input.send_keys('!test132456')\n            time.sleep(3)\n            login_submit_button.click()\n            time.sleep(3)\n        except Exception as e:\n            capture_screenshot(driver, \"login_error\")\n            allure.attach.file(\"screenshots/login_error.png\", name=\"로그인 실패\", attachment_type=allure.attachment_type.PNG)\n            pytest.fail(f\"로그인 실패: {e}\")\n    \n        # 상품 검색 단계\n        try:\n            search_box = driver.find_element(By.XPATH, \"//input[@placeholder='검색어를 입력해주세요']\")\n            search_box.send_keys(\"과자\")\n            search_box.send_keys(Keys.RETURN)\n            time.sleep(3)\n        except Exception as e:\n            capture_screenshot(driver, \"search_error\")\n            allure.attach.file(\"screenshots/search_error.png\", name=\"검색 실패\", attachment_type=allure.attachment_type.PNG)\n            pytest.fail(f\"상품 검색 실패: {e}\")\n    \n        # 장바구니 추가 단계\n        try:\n            add_button = driver.find_element(By.XPATH, \"//a[3]//div[2]//button[1]\")\n            add_button.click()\n            time.sleep(4)\n    \n            quantity_up_button = driver.find_element(By.XPATH, \"//button[@aria-label='수량올리기']\")\n            quantity_up_button.click()\n            time.sleep(2)\n    \n            cart_add_button = driver.find_element(By.XPATH, \"//button[@class='css-ahkst0 e4nu7ef3']\")\n            cart_add_button.click()\n            time.sleep(4)\n    \n            cart_button = driver.find_element(By.XPATH, \"//button[@class='css-g25h97 e14oy6dx1']\")\n>           cart_button.click()\n\nsrc/tests/ui_tests/test_ui_product_add_flow.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:402: in _execute\n    return self._parent.execute(command, params)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa246eb8210>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55ff2997f006 \\\\u003Cunknown>\\\\n#22 0x7f52c709caa4 \\\\u003Cunknown>\\\\n#23 0x7f52c7129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1038, 28)\nE         (Session info: chrome=139.0.7258.127)\nE       Stacktrace:\nE       #0 0x55ff2998002a <unknown>\nE       #1 0x55ff2941fa70 <unknown>\nE       #2 0x55ff2947878c <unknown>\nE       #3 0x55ff294765eb <unknown>\nE       #4 0x55ff29473c92 <unknown>\nE       #5 0x55ff294733a7 <unknown>\nE       #6 0x55ff29465b1b <unknown>\nE       #7 0x55ff294973e2 <unknown>\nE       #8 0x55ff2946549a <unknown>\nE       #9 0x55ff294975ae <unknown>\nE       #10 0x55ff294bd14f <unknown>\nE       #11 0x55ff294971b3 <unknown>\nE       #12 0x55ff2946359b <unknown>\nE       #13 0x55ff29464971 <unknown>\nE       #14 0x55ff299451fb <unknown>\nE       #15 0x55ff29948f49 <unknown>\nE       #16 0x55ff2992c2d9 <unknown>\nE       #17 0x55ff29949af8 <unknown>\nE       #18 0x55ff29910bbf <unknown>\nE       #19 0x55ff2996d0b8 <unknown>\nE       #20 0x55ff2996d296 <unknown>\nE       #21 0x55ff2997f006 <unknown>\nE       #22 0x7f52c709caa4 <unknown>\nE       #23 0x7f52c7129c3c <unknown>\n\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bd82e3e32160f36c645954279b4086de\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"로그인 > 상품 추가 > 추가 확인 테스트\")\n    @allure.title(\"로그인 후 상품 추가하고 상품이 장바구니에 담겨 있는지 확인\")\n    def test_ui_product_add_flow(driver):\n        driver.get(\"https://www.kurly.com/main\")\n        driver.maximize_window()\n    \n        # 로그인 단계\n        try:\n            login_button = driver.find_element(By.XPATH, \"//a[contains(text(),'로그인')]\")\n            login_button.click()\n            time.sleep(2)\n    \n            login_username_input = driver.find_element(By.XPATH, \"//input[@placeholder='아이디를 입력해주세요']\")\n            login_password_input = driver.find_element(By.XPATH, \"//input[@placeholder='비밀번호를 입력해주세요']\")\n            login_submit_button = driver.find_element(By.XPATH, \"//button[@type='submit']\")\n    \n            login_username_input.clear()\n            login_password_input.clear()\n    \n            login_username_input.send_keys('dlaaslek')\n            login_password_input.send_keys('!test132456')\n            time.sleep(3)\n            login_submit_button.click()\n            time.sleep(3)\n        except Exception as e:\n            capture_screenshot(driver, \"login_error\")\n            allure.attach.file(\"screenshots/login_error.png\", name=\"로그인 실패\", attachment_type=allure.attachment_type.PNG)\n            pytest.fail(f\"로그인 실패: {e}\")\n    \n        # 상품 검색 단계\n        try:\n            search_box = driver.find_element(By.XPATH, \"//input[@placeholder='검색어를 입력해주세요']\")\n            search_box.send_keys(\"과자\")\n            search_box.send_keys(Keys.RETURN)\n            time.sleep(3)\n        except Exception as e:\n            capture_screenshot(driver, \"search_error\")\n            allure.attach.file(\"screenshots/search_error.png\", name=\"검색 실패\", attachment_type=allure.attachment_type.PNG)\n            pytest.fail(f\"상품 검색 실패: {e}\")\n    \n        # 장바구니 추가 단계\n        try:\n            add_button = driver.find_element(By.XPATH, \"//a[3]//div[2]//button[1]\")\n            add_button.click()\n            time.sleep(4)\n    \n            quantity_up_button = driver.find_element(By.XPATH, \"//button[@aria-label='수량올리기']\")\n            quantity_up_button.click()\n            time.sleep(2)\n    \n            cart_add_button = driver.find_element(By.XPATH, \"//button[@class='css-ahkst0 e4nu7ef3']\")\n            cart_add_button.click()\n            time.sleep(4)\n    \n            cart_button = driver.find_element(By.XPATH, \"//button[@class='css-g25h97 e14oy6dx1']\")\n            cart_button.click()\n            time.sleep(4)\n        except Exception as e:\n            capture_screenshot(driver, \"cart_error\")\n>           allure.attach.file(\"screenshots/cart_error.png\", name=\"장바구니 추가 실패\", attachment_type=allure.attachment_type.PNG)\n\nsrc/tests/ui_tests/test_ui_product_add_flow.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/allure_commons/_allure.py:213: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nvenv/lib/python3.11/site-packages/pluggy/_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nvenv/lib/python3.11/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv/lib/python3.11/site-packages/allure_pytest/listener.py:258: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nvenv/lib/python3.11/site-packages/allure_commons/reporter.py:160: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nvenv/lib/python3.11/site-packages/pluggy/_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nvenv/lib/python3.11/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv/lib/python3.11/site-packages/allure_commons/logger.py:39: in report_attached_file\n    shutil.copy2(source, destination)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/shutil.py:448: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc = 'screenshots/cart_error.png'\ndst = PosixPath('/home/runner/work/QATEST/QATEST/allure-results/a2f03b71-4bef-4509-8089-c8b986d22c96-attachment.png')\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'screenshots/cart_error.png'\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/shutil.py:256: FileNotFoundError","steps":[],"attachments":[{"name":"장바구니 추가 실패","type":"image/png","size":0},{"uid":"fe48e09777336dd1","name":"Failure Screenshot","source":"fe48e09777336dd1.png","type":"image/png","size":337025},{"uid":"4b4709d3711c0dca","name":"stdout","source":"4b4709d3711c0dca.txt","type":"text/plain","size":76}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1755835624048,"stop":1755835624125,"duration":77},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"UI 테스트"},{"name":"story","value":"로그인 > 상품 추가 > 추가 확인 테스트"},{"name":"parentSuite","value":"src.tests.ui_tests"},{"name":"suite","value":"test_ui_product_add_flow"},{"name":"host","value":"pkrvmqc4gcfdwos"},{"name":"thread","value":"2732-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.ui_tests.test_ui_product_add_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"fd5d2a2d6fc6700.json","parameterValues":[]}