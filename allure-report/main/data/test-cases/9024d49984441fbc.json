{"uid":"9024d49984441fbc","name":"상품 검색 후 장바구니 추가 기능 동작 확인","fullName":"src.tests.ui_tests.test_ui_add_product#test_add_product","historyId":"526f3c30b91fa0a947b5a8a8ff4d17c0","time":{"start":1758917127799,"stop":1758917133920,"duration":6121},"status":"failed","statusMessage":"Failed: ❌ 수량 올리기 실패: Message: element click intercepted: Element <button type=\"button\" aria-label=\"수량올리기\" class=\"css-18y6jr4 e1hx75jb0\"></button> is not clickable at point (560, 282). Other element would receive the click: <section class=\"css-1a9d66x\">...</section>\n  (Session info: chrome=140.0.7339.185)\nStacktrace:\n#0 0x5557d0065fba <unknown>\n#1 0x5557cfaea6d0 <unknown>\n#2 0x5557cfb431bc <unknown>\n#3 0x5557cfb4101b <unknown>\n#4 0x5557cfb3e6c2 <unknown>\n#5 0x5557cfb3dde0 <unknown>\n#6 0x5557cfb305cb <unknown>\n#7 0x5557cfb61e32 <unknown>\n#8 0x5557cfb2ff47 <unknown>\n#9 0x5557cfb61ffe <unknown>\n#10 0x5557cfb87b54 <unknown>\n#11 0x5557cfb61c03 <unknown>\n#12 0x5557cfb2e7a8 <unknown>\n#13 0x5557cfb2f421 <unknown>\n#14 0x5557d002ab28 <unknown>\n#15 0x5557d002e87f <unknown>\n#16 0x5557d0012c49 <unknown>\n#17 0x5557d002f405 <unknown>\n#18 0x5557cfff84ff <unknown>\n#19 0x5557d0053258 <unknown>\n#20 0x5557d0053432 <unknown>\n#21 0x5557d0064fa3 <unknown>\n#22 0x7ff356c9caa4 <unknown>\n#23 0x7ff356d29c6c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5cd6a9dd4fada68a8d2f8bf91e553ec1\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"상품 추가 테스트\")\n    @allure.title(\"상품 검색 후 장바구니 추가 기능 동작 확인\")\n    def test_add_product(driver):\n        driver.get(URLs.KURLY_MAIN)\n        driver.maximize_window()\n    \n        try:\n          search_box = WebDriverWait(driver, Timeouts.MEDIUM).until(EC.element_to_be_clickable(Selectors.SEARCH_BOX))\n          search_box.send_keys(\"과자\")\n          search_box.send_keys(Keys.RETURN)\n          time.sleep(3)\n    \n          try:\n              add_button = WebDriverWait(driver, Timeouts.MEDIUM).until(EC.element_to_be_clickable(Buttons.ADD_TO_CART))\n              add_button.click()\n              driver.implicitly_wait(Timeouts.MEDIUM)\n    \n          except Exception as e:\n              capture_screenshot(driver,\"상품추가 실패\",\"screenshot_add_product\")\n              pytest.fail(f\"❌ 상품 추가 버튼 클릭 실패: {str(e)}\")\n    \n          try:\n              quantity_up_button = driver.find_element(*Buttons.INCREASE_QUANTITY)\n              for _ in range(3):\n>                 quantity_up_button.click()\n\nsrc/tests/ui_tests/test_ui_add_product.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:402: in _execute\n    return self._parent.execute(command, params)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f727feb3950>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5557d0064fa3 \\\\u003Cunknown>\\\\n#22 0x7ff356c9caa4 \\\\u003Cunknown>\\\\n#23 0x7ff356d29c6c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" aria-label=\"수량올리기\" class=\"css-18y6jr4 e1hx75jb0\"></button> is not clickable at point (560, 282). Other element would receive the click: <section class=\"css-1a9d66x\">...</section>\nE         (Session info: chrome=140.0.7339.185)\nE       Stacktrace:\nE       #0 0x5557d0065fba <unknown>\nE       #1 0x5557cfaea6d0 <unknown>\nE       #2 0x5557cfb431bc <unknown>\nE       #3 0x5557cfb4101b <unknown>\nE       #4 0x5557cfb3e6c2 <unknown>\nE       #5 0x5557cfb3dde0 <unknown>\nE       #6 0x5557cfb305cb <unknown>\nE       #7 0x5557cfb61e32 <unknown>\nE       #8 0x5557cfb2ff47 <unknown>\nE       #9 0x5557cfb61ffe <unknown>\nE       #10 0x5557cfb87b54 <unknown>\nE       #11 0x5557cfb61c03 <unknown>\nE       #12 0x5557cfb2e7a8 <unknown>\nE       #13 0x5557cfb2f421 <unknown>\nE       #14 0x5557d002ab28 <unknown>\nE       #15 0x5557d002e87f <unknown>\nE       #16 0x5557d0012c49 <unknown>\nE       #17 0x5557d002f405 <unknown>\nE       #18 0x5557cfff84ff <unknown>\nE       #19 0x5557d0053258 <unknown>\nE       #20 0x5557d0053432 <unknown>\nE       #21 0x5557d0064fa3 <unknown>\nE       #22 0x7ff356c9caa4 <unknown>\nE       #23 0x7ff356d29c6c <unknown>\n\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5cd6a9dd4fada68a8d2f8bf91e553ec1\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"상품 추가 테스트\")\n    @allure.title(\"상품 검색 후 장바구니 추가 기능 동작 확인\")\n    def test_add_product(driver):\n        driver.get(URLs.KURLY_MAIN)\n        driver.maximize_window()\n    \n        try:\n          search_box = WebDriverWait(driver, Timeouts.MEDIUM).until(EC.element_to_be_clickable(Selectors.SEARCH_BOX))\n          search_box.send_keys(\"과자\")\n          search_box.send_keys(Keys.RETURN)\n          time.sleep(3)\n    \n          try:\n              add_button = WebDriverWait(driver, Timeouts.MEDIUM).until(EC.element_to_be_clickable(Buttons.ADD_TO_CART))\n              add_button.click()\n              driver.implicitly_wait(Timeouts.MEDIUM)\n    \n          except Exception as e:\n              capture_screenshot(driver,\"상품추가 실패\",\"screenshot_add_product\")\n              pytest.fail(f\"❌ 상품 추가 버튼 클릭 실패: {str(e)}\")\n    \n          try:\n              quantity_up_button = driver.find_element(*Buttons.INCREASE_QUANTITY)\n              for _ in range(3):\n                  quantity_up_button.click()\n                  time.sleep(1)  # 클릭 간 약간의 대기 시간 추가\n    \n          except Exception as e:\n              capture_screenshot(driver,\"수량올리기 실패\",\"screenshot_add_product\")\n>             pytest.fail(f\"❌ 수량 올리기 실패: {str(e)}\")\nE             Failed: ❌ 수량 올리기 실패: Message: element click intercepted: Element <button type=\"button\" aria-label=\"수량올리기\" class=\"css-18y6jr4 e1hx75jb0\"></button> is not clickable at point (560, 282). Other element would receive the click: <section class=\"css-1a9d66x\">...</section>\nE               (Session info: chrome=140.0.7339.185)\nE             Stacktrace:\nE             #0 0x5557d0065fba <unknown>\nE             #1 0x5557cfaea6d0 <unknown>\nE             #2 0x5557cfb431bc <unknown>\nE             #3 0x5557cfb4101b <unknown>\nE             #4 0x5557cfb3e6c2 <unknown>\nE             #5 0x5557cfb3dde0 <unknown>\nE             #6 0x5557cfb305cb <unknown>\nE             #7 0x5557cfb61e32 <unknown>\nE             #8 0x5557cfb2ff47 <unknown>\nE             #9 0x5557cfb61ffe <unknown>\nE             #10 0x5557cfb87b54 <unknown>\nE             #11 0x5557cfb61c03 <unknown>\nE             #12 0x5557cfb2e7a8 <unknown>\nE             #13 0x5557cfb2f421 <unknown>\nE             #14 0x5557d002ab28 <unknown>\nE             #15 0x5557d002e87f <unknown>\nE             #16 0x5557d0012c49 <unknown>\nE             #17 0x5557d002f405 <unknown>\nE             #18 0x5557cfff84ff <unknown>\nE             #19 0x5557d0053258 <unknown>\nE             #20 0x5557d0053432 <unknown>\nE             #21 0x5557d0064fa3 <unknown>\nE             #22 0x7ff356c9caa4 <unknown>\nE             #23 0x7ff356d29c6c <unknown>\n\nsrc/tests/ui_tests/test_ui_add_product.py:41: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1758917127202,"stop":1758917127798,"duration":596},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: ❌ 수량 올리기 실패: Message: element click intercepted: Element <button type=\"button\" aria-label=\"수량올리기\" class=\"css-18y6jr4 e1hx75jb0\"></button> is not clickable at point (560, 282). Other element would receive the click: <section class=\"css-1a9d66x\">...</section>\n  (Session info: chrome=140.0.7339.185)\nStacktrace:\n#0 0x5557d0065fba <unknown>\n#1 0x5557cfaea6d0 <unknown>\n#2 0x5557cfb431bc <unknown>\n#3 0x5557cfb4101b <unknown>\n#4 0x5557cfb3e6c2 <unknown>\n#5 0x5557cfb3dde0 <unknown>\n#6 0x5557cfb305cb <unknown>\n#7 0x5557cfb61e32 <unknown>\n#8 0x5557cfb2ff47 <unknown>\n#9 0x5557cfb61ffe <unknown>\n#10 0x5557cfb87b54 <unknown>\n#11 0x5557cfb61c03 <unknown>\n#12 0x5557cfb2e7a8 <unknown>\n#13 0x5557cfb2f421 <unknown>\n#14 0x5557d002ab28 <unknown>\n#15 0x5557d002e87f <unknown>\n#16 0x5557d0012c49 <unknown>\n#17 0x5557d002f405 <unknown>\n#18 0x5557cfff84ff <unknown>\n#19 0x5557d0053258 <unknown>\n#20 0x5557d0053432 <unknown>\n#21 0x5557d0064fa3 <unknown>\n#22 0x7ff356c9caa4 <unknown>\n#23 0x7ff356d29c6c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5cd6a9dd4fada68a8d2f8bf91e553ec1\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"상품 추가 테스트\")\n    @allure.title(\"상품 검색 후 장바구니 추가 기능 동작 확인\")\n    def test_add_product(driver):\n        driver.get(URLs.KURLY_MAIN)\n        driver.maximize_window()\n    \n        try:\n          search_box = WebDriverWait(driver, Timeouts.MEDIUM).until(EC.element_to_be_clickable(Selectors.SEARCH_BOX))\n          search_box.send_keys(\"과자\")\n          search_box.send_keys(Keys.RETURN)\n          time.sleep(3)\n    \n          try:\n              add_button = WebDriverWait(driver, Timeouts.MEDIUM).until(EC.element_to_be_clickable(Buttons.ADD_TO_CART))\n              add_button.click()\n              driver.implicitly_wait(Timeouts.MEDIUM)\n    \n          except Exception as e:\n              capture_screenshot(driver,\"상품추가 실패\",\"screenshot_add_product\")\n              pytest.fail(f\"❌ 상품 추가 버튼 클릭 실패: {str(e)}\")\n    \n          try:\n              quantity_up_button = driver.find_element(*Buttons.INCREASE_QUANTITY)\n              for _ in range(3):\n>                 quantity_up_button.click()\n\nsrc/tests/ui_tests/test_ui_add_product.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:402: in _execute\n    return self._parent.execute(command, params)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f727feb3950>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5557d0064fa3 \\\\u003Cunknown>\\\\n#22 0x7ff356c9caa4 \\\\u003Cunknown>\\\\n#23 0x7ff356d29c6c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" aria-label=\"수량올리기\" class=\"css-18y6jr4 e1hx75jb0\"></button> is not clickable at point (560, 282). Other element would receive the click: <section class=\"css-1a9d66x\">...</section>\nE         (Session info: chrome=140.0.7339.185)\nE       Stacktrace:\nE       #0 0x5557d0065fba <unknown>\nE       #1 0x5557cfaea6d0 <unknown>\nE       #2 0x5557cfb431bc <unknown>\nE       #3 0x5557cfb4101b <unknown>\nE       #4 0x5557cfb3e6c2 <unknown>\nE       #5 0x5557cfb3dde0 <unknown>\nE       #6 0x5557cfb305cb <unknown>\nE       #7 0x5557cfb61e32 <unknown>\nE       #8 0x5557cfb2ff47 <unknown>\nE       #9 0x5557cfb61ffe <unknown>\nE       #10 0x5557cfb87b54 <unknown>\nE       #11 0x5557cfb61c03 <unknown>\nE       #12 0x5557cfb2e7a8 <unknown>\nE       #13 0x5557cfb2f421 <unknown>\nE       #14 0x5557d002ab28 <unknown>\nE       #15 0x5557d002e87f <unknown>\nE       #16 0x5557d0012c49 <unknown>\nE       #17 0x5557d002f405 <unknown>\nE       #18 0x5557cfff84ff <unknown>\nE       #19 0x5557d0053258 <unknown>\nE       #20 0x5557d0053432 <unknown>\nE       #21 0x5557d0064fa3 <unknown>\nE       #22 0x7ff356c9caa4 <unknown>\nE       #23 0x7ff356d29c6c <unknown>\n\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5cd6a9dd4fada68a8d2f8bf91e553ec1\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"상품 추가 테스트\")\n    @allure.title(\"상품 검색 후 장바구니 추가 기능 동작 확인\")\n    def test_add_product(driver):\n        driver.get(URLs.KURLY_MAIN)\n        driver.maximize_window()\n    \n        try:\n          search_box = WebDriverWait(driver, Timeouts.MEDIUM).until(EC.element_to_be_clickable(Selectors.SEARCH_BOX))\n          search_box.send_keys(\"과자\")\n          search_box.send_keys(Keys.RETURN)\n          time.sleep(3)\n    \n          try:\n              add_button = WebDriverWait(driver, Timeouts.MEDIUM).until(EC.element_to_be_clickable(Buttons.ADD_TO_CART))\n              add_button.click()\n              driver.implicitly_wait(Timeouts.MEDIUM)\n    \n          except Exception as e:\n              capture_screenshot(driver,\"상품추가 실패\",\"screenshot_add_product\")\n              pytest.fail(f\"❌ 상품 추가 버튼 클릭 실패: {str(e)}\")\n    \n          try:\n              quantity_up_button = driver.find_element(*Buttons.INCREASE_QUANTITY)\n              for _ in range(3):\n                  quantity_up_button.click()\n                  time.sleep(1)  # 클릭 간 약간의 대기 시간 추가\n    \n          except Exception as e:\n              capture_screenshot(driver,\"수량올리기 실패\",\"screenshot_add_product\")\n>             pytest.fail(f\"❌ 수량 올리기 실패: {str(e)}\")\nE             Failed: ❌ 수량 올리기 실패: Message: element click intercepted: Element <button type=\"button\" aria-label=\"수량올리기\" class=\"css-18y6jr4 e1hx75jb0\"></button> is not clickable at point (560, 282). Other element would receive the click: <section class=\"css-1a9d66x\">...</section>\nE               (Session info: chrome=140.0.7339.185)\nE             Stacktrace:\nE             #0 0x5557d0065fba <unknown>\nE             #1 0x5557cfaea6d0 <unknown>\nE             #2 0x5557cfb431bc <unknown>\nE             #3 0x5557cfb4101b <unknown>\nE             #4 0x5557cfb3e6c2 <unknown>\nE             #5 0x5557cfb3dde0 <unknown>\nE             #6 0x5557cfb305cb <unknown>\nE             #7 0x5557cfb61e32 <unknown>\nE             #8 0x5557cfb2ff47 <unknown>\nE             #9 0x5557cfb61ffe <unknown>\nE             #10 0x5557cfb87b54 <unknown>\nE             #11 0x5557cfb61c03 <unknown>\nE             #12 0x5557cfb2e7a8 <unknown>\nE             #13 0x5557cfb2f421 <unknown>\nE             #14 0x5557d002ab28 <unknown>\nE             #15 0x5557d002e87f <unknown>\nE             #16 0x5557d0012c49 <unknown>\nE             #17 0x5557d002f405 <unknown>\nE             #18 0x5557cfff84ff <unknown>\nE             #19 0x5557d0053258 <unknown>\nE             #20 0x5557d0053432 <unknown>\nE             #21 0x5557d0064fa3 <unknown>\nE             #22 0x7ff356c9caa4 <unknown>\nE             #23 0x7ff356d29c6c <unknown>\n\nsrc/tests/ui_tests/test_ui_add_product.py:41: Failed","steps":[],"attachments":[{"uid":"21a0cc2f1e6dd03a","name":"Failure Screenshot","source":"21a0cc2f1e6dd03a.png","type":"image/png","size":105520},{"uid":"c0e3ce89a3e4d889","name":"stdout","source":"c0e3ce89a3e4d889.txt","type":"text/plain","size":99}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1758917134004,"stop":1758917134074,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"상품 추가 테스트"},{"name":"feature","value":"UI 테스트"},{"name":"parentSuite","value":"src.tests.ui_tests"},{"name":"suite","value":"test_ui_add_product"},{"name":"host","value":"runnervm3ublj"},{"name":"thread","value":"2708-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.ui_tests.test_ui_add_product"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"9024d49984441fbc.json","parameterValues":[]}