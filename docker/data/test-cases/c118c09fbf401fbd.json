{"uid":"c118c09fbf401fbd","name":"test_product_search[TC_002-\\uc81c\\ub85c\\ucf5c\\ub77c]","fullName":"src.tests.ui_tests.test_ui_search#test_product_search","historyId":"2f24dc0a11e6bda845f6e774f483d5df","time":{"start":1743274946876,"stop":1743274946936,"duration":60},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=134.0.6998.165)\nStacktrace:\n#0 0x557396fb1ffa <unknown>\n#1 0x557396a70970 <unknown>\n#2 0x557396a5670e <unknown>\n#3 0x557396a7f3d9 <unknown>\n#4 0x557396af0be9 <unknown>\n#5 0x557396b0e09c <unknown>\n#6 0x557396ae8063 <unknown>\n#7 0x557396ab4328 <unknown>\n#8 0x557396ab5491 <unknown>\n#9 0x557396f7942b <unknown>\n#10 0x557396f7d2ec <unknown>\n#11 0x557396f60a22 <unknown>\n#12 0x557396f7de64 <unknown>\n#13 0x557396f44bef <unknown>\n#14 0x557396fa0558 <unknown>\n#15 0x557396fa0736 <unknown>\n#16 0x557396fb0e76 <unknown>\n#17 0x7fc9ff6641f5 <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f23caf5a94a51a6a072a1173ee5f73a\")>\ntc_id = 'TC_002', search_term = '제로콜라'\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"상품 검색 테스트\")\n    @pytest.mark.parametrize(\"tc_id, search_term\", search_cases)\n    def test_product_search(driver, tc_id, search_term):\n        print(f\"\uD83D\uDD0D TC {tc_id}: '{search_term}' 검색 테스트 실행 중...\")\n    \n>       driver.get(\"https://www.kurly.com/main\")\n\nsrc/tests/ui_tests/test_ui_search.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb649e61350>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...\\\\n#15 0x557396fa0736 \\\\u003Cunknown>\\\\n#16 0x557396fb0e76 \\\\u003Cunknown>\\\\n#17 0x7fc9ff6641f5 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x557396fb1ffa <unknown>\nE       #1 0x557396a70970 <unknown>\nE       #2 0x557396a5670e <unknown>\nE       #3 0x557396a7f3d9 <unknown>\nE       #4 0x557396af0be9 <unknown>\nE       #5 0x557396b0e09c <unknown>\nE       #6 0x557396ae8063 <unknown>\nE       #7 0x557396ab4328 <unknown>\nE       #8 0x557396ab5491 <unknown>\nE       #9 0x557396f7942b <unknown>\nE       #10 0x557396f7d2ec <unknown>\nE       #11 0x557396f60a22 <unknown>\nE       #12 0x557396f7de64 <unknown>\nE       #13 0x557396f44bef <unknown>\nE       #14 0x557396fa0558 <unknown>\nE       #15 0x557396fa0736 <unknown>\nE       #16 0x557396fb0e76 <unknown>\nE       #17 0x7fc9ff6641f5 <unknown>\n\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1743274940599,"stop":1743274940729,"duration":130},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=134.0.6998.165)\nStacktrace:\n#0 0x557396fb1ffa <unknown>\n#1 0x557396a70970 <unknown>\n#2 0x557396a5670e <unknown>\n#3 0x557396a7f3d9 <unknown>\n#4 0x557396af0be9 <unknown>\n#5 0x557396b0e09c <unknown>\n#6 0x557396ae8063 <unknown>\n#7 0x557396ab4328 <unknown>\n#8 0x557396ab5491 <unknown>\n#9 0x557396f7942b <unknown>\n#10 0x557396f7d2ec <unknown>\n#11 0x557396f60a22 <unknown>\n#12 0x557396f7de64 <unknown>\n#13 0x557396f44bef <unknown>\n#14 0x557396fa0558 <unknown>\n#15 0x557396fa0736 <unknown>\n#16 0x557396fb0e76 <unknown>\n#17 0x7fc9ff6641f5 <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f23caf5a94a51a6a072a1173ee5f73a\")>\ntc_id = 'TC_002', search_term = '제로콜라'\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"상품 검색 테스트\")\n    @pytest.mark.parametrize(\"tc_id, search_term\", search_cases)\n    def test_product_search(driver, tc_id, search_term):\n        print(f\"\uD83D\uDD0D TC {tc_id}: '{search_term}' 검색 테스트 실행 중...\")\n    \n>       driver.get(\"https://www.kurly.com/main\")\n\nsrc/tests/ui_tests/test_ui_search.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb649e61350>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...\\\\n#15 0x557396fa0736 \\\\u003Cunknown>\\\\n#16 0x557396fb0e76 \\\\u003Cunknown>\\\\n#17 0x7fc9ff6641f5 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x557396fb1ffa <unknown>\nE       #1 0x557396a70970 <unknown>\nE       #2 0x557396a5670e <unknown>\nE       #3 0x557396a7f3d9 <unknown>\nE       #4 0x557396af0be9 <unknown>\nE       #5 0x557396b0e09c <unknown>\nE       #6 0x557396ae8063 <unknown>\nE       #7 0x557396ab4328 <unknown>\nE       #8 0x557396ab5491 <unknown>\nE       #9 0x557396f7942b <unknown>\nE       #10 0x557396f7d2ec <unknown>\nE       #11 0x557396f60a22 <unknown>\nE       #12 0x557396f7de64 <unknown>\nE       #13 0x557396f44bef <unknown>\nE       #14 0x557396fa0558 <unknown>\nE       #15 0x557396fa0736 <unknown>\nE       #16 0x557396fb0e76 <unknown>\nE       #17 0x7fc9ff6641f5 <unknown>\n\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException","steps":[],"attachments":[{"uid":"4792f57a0b319ac3","name":"stdout","source":"4792f57a0b319ac3.txt","type":"text/plain","size":62}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1743274947412,"stop":1743274947415,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"상품 검색 테스트"},{"name":"feature","value":"UI 테스트"},{"name":"parentSuite","value":"src.tests.ui_tests"},{"name":"suite","value":"test_ui_search"},{"name":"host","value":"47923635f15b"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.ui_tests.test_ui_search"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"search_term","value":"'제로콜라'"},{"name":"tc_id","value":"'TC_002'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"c118c09fbf401fbd.json","parameterValues":["'제로콜라'","'TC_002'"]}