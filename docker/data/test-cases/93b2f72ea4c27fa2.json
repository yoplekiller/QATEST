{"uid":"93b2f72ea4c27fa2","name":"test_add_product","fullName":"src.tests.ui_tests.test_ui_add_product#test_add_product","historyId":"526f3c30b91fa0a947b5a8a8ff4d17c0","time":{"start":1743279952374,"stop":1743279959671,"duration":7297},"description":"\n상품을 검색 후 추가하는 테스트\n- 수량올리기, 수량내리기 기능 구현\n- 검색 후 상품 선택 후 카트에 추가 구현\n","descriptionHtml":"<p>상품을 검색 후 추가하는 테스트</p>\n<ul>\n<li>수량올리기, 수량내리기 기능 구현</li>\n<li>검색 후 상품 선택 후 카트에 추가 구현</li>\n</ul>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x56105e5fdffa <unknown>\n#1 0x56105e0bc7c3 <unknown>\n#2 0x56105e0ff5df <unknown>\n#3 0x56105e134196 <unknown>\n#4 0x56105e12e813 <unknown>\n#5 0x56105e12dae5 <unknown>\n#6 0x56105e085528 <unknown>\n#7 0x56105e5c542b <unknown>\n#8 0x56105e5c92ec <unknown>\n#9 0x56105e5aca22 <unknown>\n#10 0x56105e5c9e64 <unknown>\n#11 0x56105e590bef <unknown>\n#12 0x56105e083f5b <unknown>\n#13 0x7f8fbc0df24a <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d0a5e944baa8843d646599f2f65ae79c\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"상품 추가 테스트\")\n    def test_add_product(driver):\n        \"\"\"\n           상품을 검색 후 추가하는 테스트\n           - 수량올리기, 수량내리기 기능 구현\n           - 검색 후 상품 선택 후 카트에 추가 구현\n           \"\"\"\n        driver.get(\"https://www.kurly.com/main\")\n        driver.maximize_window()\n    \n        try:\n          search_box = driver.find_element(By.XPATH, \"//input[@placeholder='검색어를 입력해주세요']\")\n          search_box.send_keys(\"과자\")\n          search_box.send_keys(Keys.RETURN)\n          time.sleep(4)\n    \n          try:\n>             add_button = driver.find_element(By.XPATH, \"//a[3]//div[2]//button[1]\")\n\nsrc/tests/ui_tests/test_ui_add_product.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa7b4fe8440>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...\\\\n#15 0x56105e5ec736 \\\\u003Cunknown>\\\\n#16 0x56105e5fce76 \\\\u003Cunknown>\\\\n#17 0x7f8fbc1411f5 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x56105e5fdffa <unknown>\nE       #1 0x56105e0bc970 <unknown>\nE       #2 0x56105e0a270e <unknown>\nE       #3 0x56105e0cb3d9 <unknown>\nE       #4 0x56105e13cbe9 <unknown>\nE       #5 0x56105e15a09c <unknown>\nE       #6 0x56105e134063 <unknown>\nE       #7 0x56105e100328 <unknown>\nE       #8 0x56105e101491 <unknown>\nE       #9 0x56105e5c542b <unknown>\nE       #10 0x56105e5c92ec <unknown>\nE       #11 0x56105e5aca22 <unknown>\nE       #12 0x56105e5c9e64 <unknown>\nE       #13 0x56105e590bef <unknown>\nE       #14 0x56105e5ec558 <unknown>\nE       #15 0x56105e5ec736 <unknown>\nE       #16 0x56105e5fce76 <unknown>\nE       #17 0x7f8fbc1411f5 <unknown>\n\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d0a5e944baa8843d646599f2f65ae79c\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"상품 추가 테스트\")\n    def test_add_product(driver):\n        \"\"\"\n           상품을 검색 후 추가하는 테스트\n           - 수량올리기, 수량내리기 기능 구현\n           - 검색 후 상품 선택 후 카트에 추가 구현\n           \"\"\"\n        driver.get(\"https://www.kurly.com/main\")\n        driver.maximize_window()\n    \n        try:\n          search_box = driver.find_element(By.XPATH, \"//input[@placeholder='검색어를 입력해주세요']\")\n          search_box.send_keys(\"과자\")\n          search_box.send_keys(Keys.RETURN)\n          time.sleep(4)\n    \n          try:\n              add_button = driver.find_element(By.XPATH, \"//a[3]//div[2]//button[1]\")\n              add_button.click()\n              time.sleep(4)\n          except Exception as e:\n>             capture_screenshot(driver,\"상품추가 실패\",\"screenshot_add_product\")\n\nsrc/tests/ui_tests/test_ui_add_product.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/utilites.py:22: in capture_screenshot\n    driver.save_screenshot(screenshots_file_path)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:994: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:969: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa7b4fe8440>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x561...\\\\n#11 0x56105e590bef \\\\u003Cunknown>\\\\n#12 0x56105e083f5b \\\\u003Cunknown>\\\\n#13 0x7f8fbc0df24a \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x56105e5fdffa <unknown>\nE       #1 0x56105e0bc7c3 <unknown>\nE       #2 0x56105e0ff5df <unknown>\nE       #3 0x56105e134196 <unknown>\nE       #4 0x56105e12e813 <unknown>\nE       #5 0x56105e12dae5 <unknown>\nE       #6 0x56105e085528 <unknown>\nE       #7 0x56105e5c542b <unknown>\nE       #8 0x56105e5c92ec <unknown>\nE       #9 0x56105e5aca22 <unknown>\nE       #10 0x56105e5c9e64 <unknown>\nE       #11 0x56105e590bef <unknown>\nE       #12 0x56105e083f5b <unknown>\nE       #13 0x7f8fbc0df24a <unknown>\n\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d0a5e944baa8843d646599f2f65ae79c\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"상품 추가 테스트\")\n    def test_add_product(driver):\n        \"\"\"\n           상품을 검색 후 추가하는 테스트\n           - 수량올리기, 수량내리기 기능 구현\n           - 검색 후 상품 선택 후 카트에 추가 구현\n           \"\"\"\n        driver.get(\"https://www.kurly.com/main\")\n        driver.maximize_window()\n    \n        try:\n          search_box = driver.find_element(By.XPATH, \"//input[@placeholder='검색어를 입력해주세요']\")\n          search_box.send_keys(\"과자\")\n          search_box.send_keys(Keys.RETURN)\n          time.sleep(4)\n    \n          try:\n              add_button = driver.find_element(By.XPATH, \"//a[3]//div[2]//button[1]\")\n              add_button.click()\n              time.sleep(4)\n          except Exception as e:\n              capture_screenshot(driver,\"상품추가 실패\",\"screenshot_add_product\")\n              pytest.fail(f\"❌ 상품 추가 버튼 클릭 실패: {str(e)}\")\n    \n          try:\n              quantity_up_button = driver.find_element(By.XPATH, \"//button[@aria-label='수량올리기']\")\n              for _ in range(2):\n                  quantity_up_button.click()\n              time.sleep(4)\n          except Exception as e:\n              capture_screenshot(driver,\"수량올리기 실패\",\"screenshot_add_product\")\n              pytest.fail(f\"❌ 수량 올리기 실패: {str(e)}\")\n    \n          try:\n              quantity_down_button = driver.find_element(By.XPATH, \"//button[@aria-label='수량내리기']\")\n              for _ in range(2):\n                  quantity_down_button.click()\n              time.sleep(4)\n          except Exception as e:\n              capture_screenshot(driver,\"수량내리기 실패\",\"screenshot_add_product\")\n              pytest.fail(f\"❌ 수량 내리기 실패: {str(e)}\")\n    \n          try:\n              cart_add_button = driver.find_element(By.XPATH, \"//button[@class='css-ahkst0 e4nu7ef3']\")\n              cart_add_button.click()\n              time.sleep(4)\n          except Exception as e:\n              capture_screenshot(driver, \"상품 추가\", \"screenshots_add_product\")\n              pytest.fail(f\"❌ 상품 추가 실패: {str(e)}\")\n    \n          # 검색 결과 확인\n          if \"과자\" not in driver.page_source:\n              screenshot_path = \"unexpected_result.png\"\n    \n              # 스크린샷 저장\n              driver.save_screenshot(screenshot_path)\n    \n              # Allure Report에 스크린샷 첨부\n              with open(screenshot_path, \"rb\") as image_file:\n                  allure.attach(image_file.read(), name=\"Unexpected Search Result\", attachment_type=allure.attachment_type.PNG)\n              pytest.fail(\"❌ 검색 결과에서 '과자'가 포함되지 않음.\")\n    \n        except Exception as e:\n>           capture_screenshot(driver,\"테스트실패\",\"screenshots_add_product\")\n\nsrc/tests/ui_tests/test_ui_add_product.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/utilites.py:22: in capture_screenshot\n    driver.save_screenshot(screenshots_file_path)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:994: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:969: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa7b4fe8440>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x561...\\\\n#11 0x56105e590bef \\\\u003Cunknown>\\\\n#12 0x56105e083f5b \\\\u003Cunknown>\\\\n#13 0x7f8fbc0df24a \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x56105e5fdffa <unknown>\nE       #1 0x56105e0bc7c3 <unknown>\nE       #2 0x56105e0ff5df <unknown>\nE       #3 0x56105e134196 <unknown>\nE       #4 0x56105e12e813 <unknown>\nE       #5 0x56105e12dae5 <unknown>\nE       #6 0x56105e085528 <unknown>\nE       #7 0x56105e5c542b <unknown>\nE       #8 0x56105e5c92ec <unknown>\nE       #9 0x56105e5aca22 <unknown>\nE       #10 0x56105e5c9e64 <unknown>\nE       #11 0x56105e590bef <unknown>\nE       #12 0x56105e083f5b <unknown>\nE       #13 0x7f8fbc0df24a <unknown>\n\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1743279951622,"stop":1743279952373,"duration":751},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"driver::0","time":{"start":1743279959777,"stop":1743279959803,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"UI 테스트"},{"name":"story","value":"상품 추가 테스트"},{"name":"parentSuite","value":"src.tests.ui_tests"},{"name":"suite","value":"test_ui_add_product"},{"name":"host","value":"08d1e8e1efcb"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.ui_tests.test_ui_add_product"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"93b2f72ea4c27fa2.json","parameterValues":[]}