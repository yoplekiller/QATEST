{"uid":"ce8427a1ea58145b","name":"test_cart","fullName":"src.tests.ui_tests.test_ui_cart#test_cart","historyId":"a5c99d53abd33890bbdde8e20d7870d0","time":{"start":1743274934843,"stop":1743274937024,"duration":2181},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x55e8953efffa <unknown>\n#1 0x55e894eae7c3 <unknown>\n#2 0x55e894ef15df <unknown>\n#3 0x55e894f26196 <unknown>\n#4 0x55e894f20813 <unknown>\n#5 0x55e894f1fae5 <unknown>\n#6 0x55e894e77528 <unknown>\n#7 0x55e8953b742b <unknown>\n#8 0x55e8953bb2ec <unknown>\n#9 0x55e89539ea22 <unknown>\n#10 0x55e8953bbe64 <unknown>\n#11 0x55e895382bef <unknown>\n#12 0x55e894e75f5b <unknown>\n#13 0x7f24f2b6f24a <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e675f152d25cb112b2cb9edf386c2fb6\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"장바구니 화면 체크 테스트\")\n    def test_cart(driver):\n    \n        driver.get(\"https://www.kurly.com/main\")\n        driver.maximize_window()\n    \n        try:\n          cart_button = driver.find_element(By.XPATH,\"//button[@class='css-g25h97 e14oy6dx1']\")\n>         cart_button.click()\n\nsrc/tests/ui_tests/test_ui_cart.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb649d74050>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...\\\\n#26 0x55e8953de736 \\\\u003Cunknown>\\\\n#27 0x55e8953eee76 \\\\u003Cunknown>\\\\n#28 0x7f24f2bd11f5 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: Unable to receive message from renderer\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x55e8953efffa <unknown>\nE       #1 0x55e894eae970 <unknown>\nE       #2 0x55e894e95d0d <unknown>\nE       #3 0x55e894e959ef <unknown>\nE       #4 0x55e894e93739 <unknown>\nE       #5 0x55e894e9417f <unknown>\nE       #6 0x55e894eb4ece <unknown>\nE       #7 0x55e894eb7d58 <unknown>\nE       #8 0x55e894eb7de3 <unknown>\nE       #9 0x55e894f048c4 <unknown>\nE       #10 0x55e894f026f2 <unknown>\nE       #11 0x55e894f018ca <unknown>\nE       #12 0x55e894ef48cd <unknown>\nE       #13 0x55e894f26292 <unknown>\nE       #14 0x55e894ef3e4a <unknown>\nE       #15 0x55e894f2645e <unknown>\nE       #16 0x55e894f4c70c <unknown>\nE       #17 0x55e894f26063 <unknown>\nE       #18 0x55e894ef2328 <unknown>\nE       #19 0x55e894ef3491 <unknown>\nE       #20 0x55e8953b742b <unknown>\nE       #21 0x55e8953bb2ec <unknown>\nE       #22 0x55e89539ea22 <unknown>\nE       #23 0x55e8953bbe64 <unknown>\nE       #24 0x55e895382bef <unknown>\nE       #25 0x55e8953de558 <unknown>\nE       #26 0x55e8953de736 <unknown>\nE       #27 0x55e8953eee76 <unknown>\nE       #28 0x7f24f2bd11f5 <unknown>\n\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e675f152d25cb112b2cb9edf386c2fb6\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"장바구니 화면 체크 테스트\")\n    def test_cart(driver):\n    \n        driver.get(\"https://www.kurly.com/main\")\n        driver.maximize_window()\n    \n        try:\n          cart_button = driver.find_element(By.XPATH,\"//button[@class='css-g25h97 e14oy6dx1']\")\n          cart_button.click()\n          time.sleep(4)\n    \n          assert \"컬리 - 마켓컬리/뷰티컬리\" in driver.title, \"❌ 장바구니 페이지가 열리지 않았습니다!\"\n          capture_screenshot(driver,\"장바구니\",\"screenshots_cart\")\n    \n        except Exception as e:\n>           capture_screenshot(driver,\"장바구니_실패\",\"screenshots_cart\")\n\nsrc/tests/ui_tests/test_ui_cart.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/utilites.py:22: in capture_screenshot\n    driver.save_screenshot(screenshots_file_path)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:994: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:969: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb649d74050>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x55e...\\\\n#11 0x55e895382bef \\\\u003Cunknown>\\\\n#12 0x55e894e75f5b \\\\u003Cunknown>\\\\n#13 0x7f24f2b6f24a \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x55e8953efffa <unknown>\nE       #1 0x55e894eae7c3 <unknown>\nE       #2 0x55e894ef15df <unknown>\nE       #3 0x55e894f26196 <unknown>\nE       #4 0x55e894f20813 <unknown>\nE       #5 0x55e894f1fae5 <unknown>\nE       #6 0x55e894e77528 <unknown>\nE       #7 0x55e8953b742b <unknown>\nE       #8 0x55e8953bb2ec <unknown>\nE       #9 0x55e89539ea22 <unknown>\nE       #10 0x55e8953bbe64 <unknown>\nE       #11 0x55e895382bef <unknown>\nE       #12 0x55e894e75f5b <unknown>\nE       #13 0x7f24f2b6f24a <unknown>\n\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1743274934701,"stop":1743274934843,"duration":142},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"driver::0","time":{"start":1743274937085,"stop":1743274937088,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"UI 테스트"},{"name":"story","value":"장바구니 화면 체크 테스트"},{"name":"parentSuite","value":"src.tests.ui_tests"},{"name":"suite","value":"test_ui_cart"},{"name":"host","value":"47923635f15b"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.ui_tests.test_ui_cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ce8427a1ea58145b.json","parameterValues":[]}