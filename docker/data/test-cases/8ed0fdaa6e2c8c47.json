{"uid":"8ed0fdaa6e2c8c47","name":"test_category","fullName":"src.tests.ui_tests.test_ui_category#test_category","historyId":"bdd47d824380b8945b6f725c5ea0b675","time":{"start":1743279967623,"stop":1743280003078,"duration":35455},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: unable to send message to renderer\n  (Session info: chrome=134.0.6998.165)\nStacktrace:\n#0 0x55fb58ce9ffa <unknown>\n#1 0x55fb587a8970 <unknown>\n#2 0x55fb5878ed5c <unknown>\n#3 0x55fb5878ecd5 <unknown>\n#4 0x55fb5878d4e6 <unknown>\n#5 0x55fb5878e17f <unknown>\n#6 0x55fb587b78f9 <unknown>\n#7 0x55fb588537c9 <unknown>\n#8 0x55fb58820292 <unknown>\n#9 0x55fb5884670c <unknown>\n#10 0x55fb58820063 <unknown>\n#11 0x55fb587ec328 <unknown>\n#12 0x55fb587ed491 <unknown>\n#13 0x55fb58cb142b <unknown>\n#14 0x55fb58cb52ec <unknown>\n#15 0x55fb58c98a22 <unknown>\n#16 0x55fb58cb5e64 <unknown>\n#17 0x55fb58c7cbef <unknown>\n#18 0x55fb58cd8558 <unknown>\n#19 0x55fb58cd8736 <unknown>\n#20 0x55fb58ce8e76 <unknown>\n#21 0x7f0dc94e31f5 <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"426d1b11ad886f0416fd9f4da397cec7\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"카테고리 기능 테스트\")\n    def test_category(driver):\n        driver.get(\"https://www.kurly.com/main\")\n        driver.maximize_window()\n    \n        try:\n          #검색\n          search_box = driver.find_element(By.XPATH, \"//input[@placeholder='검색어를 입력해주세요']\")\n          search_box.send_keys(\"제로콜라\")\n          search_box.send_keys(Keys.RETURN)\n          time.sleep(4)\n    \n    \n          def click_category(category_name, screenshot_name):\n              try:\n                  category_button = driver.find_element(By.XPATH,f\"//a[contains(text(),'{category_name}')]\")\n                  category_button.click()\n                  time.sleep(2)\n                  capture_screenshot(driver, screenshot_name, \"screenshots_category\")\n              except Exception as e:\n                  capture_screenshot(driver,f\"{screenshot_name}_실패\",\"screenshots_category\")\n                  allure.attach(driver.get_screenshot_as_png(), name=f\"{screenshot_name}_실패\",\n                                attachment_type=allure.attachment_type.PNG)\n                  pytest.fail(f\"❌ '{category_name}' 클릭 실패: {str(e)}\")\n    \n          categories =[\n              (\"추천순\", \"추천순\"),\n              (\"낮은 가격순\", \"낮은가격순\"),\n              (\"높은 가격순\", \"높은가격순\"),\n              (\"판매량순\", \"판매량순\"),\n              (\"혜택순\", \"혜택순\"),\n              (\"신상품순\", \"신상품순\"),\n          ]\n          for category_name, screenshot_name in categories:\n              click_category(category_name, screenshot_name)\n    \n        except Exception as e:\n            capture_screenshot(driver,\"카테고리_테스트실패\",\"screenshots_category\")\n            allure.attach(driver.get_screenshot_as_png(), name=\"카테고리_테스트실패\",\n                          attachment_type=allure.attachment_type.PNG)\n            pytest.fail(f\"❌ 카테고리 테스트 실패: {str(e)}\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n        #카테고리별 버튼\n        category_button = driver.find_element(By.XPATH,\"//a[contains(text(),'추천순')]\")\n        category_button.click()\n        time.sleep(2)\n        capture_screenshot(driver,\"추천순\",\"screenshots_category\")\n    \n    \n        category_button = driver.find_element(By.XPATH, \"//a[contains(text(),'낮은 가격순')]\")\n        category_button.click()\n        time.sleep(2)\n        capture_screenshot(driver, \"낮은가격순\", \"screenshots_category\")\n    \n    \n        category_button = driver.find_element(By.XPATH, \"//a[contains(text(),'높은 가격순')]\")\n        category_button.click()\n        time.sleep(2)\n        capture_screenshot(driver, \"높은가격순\", \"screenshots_category\")\n    \n    \n        category_button = driver.find_element(By.XPATH, \"//a[contains(text(),'판매량순')]\")\n        category_button.click()\n        time.sleep(2)\n        capture_screenshot(driver, \"판매량순\", \"screenshots_category\")\n    \n    \n        category_button = driver.find_element(By.XPATH, \"//a[contains(text(),'혜택순')]\")\n        category_button.click()\n        time.sleep(2)\n        capture_screenshot(driver, \"혜택순\", \"screenshots_category\")\n    \n    \n        category_button = driver.find_element(By.XPATH, \"//a[contains(text(),'신상품순')]\")\n        category_button.click()\n        time.sleep(2)\n>       capture_screenshot(driver, \"신상품순\", \"screenshots_category\")\n\nsrc/tests/ui_tests/test_ui_category.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/utilites.py:22: in capture_screenshot\n    driver.save_screenshot(screenshots_file_path)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:994: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:969: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa7b4fe6850>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...\\\\n#19 0x55fb58cd8736 \\\\u003Cunknown>\\\\n#20 0x55fb58ce8e76 \\\\u003Cunknown>\\\\n#21 0x7f0dc94e31f5 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: unable to send message to renderer\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x55fb58ce9ffa <unknown>\nE       #1 0x55fb587a8970 <unknown>\nE       #2 0x55fb5878ed5c <unknown>\nE       #3 0x55fb5878ecd5 <unknown>\nE       #4 0x55fb5878d4e6 <unknown>\nE       #5 0x55fb5878e17f <unknown>\nE       #6 0x55fb587b78f9 <unknown>\nE       #7 0x55fb588537c9 <unknown>\nE       #8 0x55fb58820292 <unknown>\nE       #9 0x55fb5884670c <unknown>\nE       #10 0x55fb58820063 <unknown>\nE       #11 0x55fb587ec328 <unknown>\nE       #12 0x55fb587ed491 <unknown>\nE       #13 0x55fb58cb142b <unknown>\nE       #14 0x55fb58cb52ec <unknown>\nE       #15 0x55fb58c98a22 <unknown>\nE       #16 0x55fb58cb5e64 <unknown>\nE       #17 0x55fb58c7cbef <unknown>\nE       #18 0x55fb58cd8558 <unknown>\nE       #19 0x55fb58cd8736 <unknown>\nE       #20 0x55fb58ce8e76 <unknown>\nE       #21 0x7f0dc94e31f5 <unknown>\n\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1743279967260,"stop":1743279967621,"duration":361},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: unable to send message to renderer\n  (Session info: chrome=134.0.6998.165)\nStacktrace:\n#0 0x55fb58ce9ffa <unknown>\n#1 0x55fb587a8970 <unknown>\n#2 0x55fb5878ed5c <unknown>\n#3 0x55fb5878ecd5 <unknown>\n#4 0x55fb5878d4e6 <unknown>\n#5 0x55fb5878e17f <unknown>\n#6 0x55fb587b78f9 <unknown>\n#7 0x55fb588537c9 <unknown>\n#8 0x55fb58820292 <unknown>\n#9 0x55fb5884670c <unknown>\n#10 0x55fb58820063 <unknown>\n#11 0x55fb587ec328 <unknown>\n#12 0x55fb587ed491 <unknown>\n#13 0x55fb58cb142b <unknown>\n#14 0x55fb58cb52ec <unknown>\n#15 0x55fb58c98a22 <unknown>\n#16 0x55fb58cb5e64 <unknown>\n#17 0x55fb58c7cbef <unknown>\n#18 0x55fb58cd8558 <unknown>\n#19 0x55fb58cd8736 <unknown>\n#20 0x55fb58ce8e76 <unknown>\n#21 0x7f0dc94e31f5 <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"426d1b11ad886f0416fd9f4da397cec7\")>\n\n    @allure.feature(\"UI 테스트\")\n    @allure.story(\"카테고리 기능 테스트\")\n    def test_category(driver):\n        driver.get(\"https://www.kurly.com/main\")\n        driver.maximize_window()\n    \n        try:\n          #검색\n          search_box = driver.find_element(By.XPATH, \"//input[@placeholder='검색어를 입력해주세요']\")\n          search_box.send_keys(\"제로콜라\")\n          search_box.send_keys(Keys.RETURN)\n          time.sleep(4)\n    \n    \n          def click_category(category_name, screenshot_name):\n              try:\n                  category_button = driver.find_element(By.XPATH,f\"//a[contains(text(),'{category_name}')]\")\n                  category_button.click()\n                  time.sleep(2)\n                  capture_screenshot(driver, screenshot_name, \"screenshots_category\")\n              except Exception as e:\n                  capture_screenshot(driver,f\"{screenshot_name}_실패\",\"screenshots_category\")\n                  allure.attach(driver.get_screenshot_as_png(), name=f\"{screenshot_name}_실패\",\n                                attachment_type=allure.attachment_type.PNG)\n                  pytest.fail(f\"❌ '{category_name}' 클릭 실패: {str(e)}\")\n    \n          categories =[\n              (\"추천순\", \"추천순\"),\n              (\"낮은 가격순\", \"낮은가격순\"),\n              (\"높은 가격순\", \"높은가격순\"),\n              (\"판매량순\", \"판매량순\"),\n              (\"혜택순\", \"혜택순\"),\n              (\"신상품순\", \"신상품순\"),\n          ]\n          for category_name, screenshot_name in categories:\n              click_category(category_name, screenshot_name)\n    \n        except Exception as e:\n            capture_screenshot(driver,\"카테고리_테스트실패\",\"screenshots_category\")\n            allure.attach(driver.get_screenshot_as_png(), name=\"카테고리_테스트실패\",\n                          attachment_type=allure.attachment_type.PNG)\n            pytest.fail(f\"❌ 카테고리 테스트 실패: {str(e)}\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n        #카테고리별 버튼\n        category_button = driver.find_element(By.XPATH,\"//a[contains(text(),'추천순')]\")\n        category_button.click()\n        time.sleep(2)\n        capture_screenshot(driver,\"추천순\",\"screenshots_category\")\n    \n    \n        category_button = driver.find_element(By.XPATH, \"//a[contains(text(),'낮은 가격순')]\")\n        category_button.click()\n        time.sleep(2)\n        capture_screenshot(driver, \"낮은가격순\", \"screenshots_category\")\n    \n    \n        category_button = driver.find_element(By.XPATH, \"//a[contains(text(),'높은 가격순')]\")\n        category_button.click()\n        time.sleep(2)\n        capture_screenshot(driver, \"높은가격순\", \"screenshots_category\")\n    \n    \n        category_button = driver.find_element(By.XPATH, \"//a[contains(text(),'판매량순')]\")\n        category_button.click()\n        time.sleep(2)\n        capture_screenshot(driver, \"판매량순\", \"screenshots_category\")\n    \n    \n        category_button = driver.find_element(By.XPATH, \"//a[contains(text(),'혜택순')]\")\n        category_button.click()\n        time.sleep(2)\n        capture_screenshot(driver, \"혜택순\", \"screenshots_category\")\n    \n    \n        category_button = driver.find_element(By.XPATH, \"//a[contains(text(),'신상품순')]\")\n        category_button.click()\n        time.sleep(2)\n>       capture_screenshot(driver, \"신상품순\", \"screenshots_category\")\n\nsrc/tests/ui_tests/test_ui_category.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/utilites.py:22: in capture_screenshot\n    driver.save_screenshot(screenshots_file_path)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:994: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:969: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa7b4fe6850>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...\\\\n#19 0x55fb58cd8736 \\\\u003Cunknown>\\\\n#20 0x55fb58ce8e76 \\\\u003Cunknown>\\\\n#21 0x7f0dc94e31f5 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: unable to send message to renderer\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x55fb58ce9ffa <unknown>\nE       #1 0x55fb587a8970 <unknown>\nE       #2 0x55fb5878ed5c <unknown>\nE       #3 0x55fb5878ecd5 <unknown>\nE       #4 0x55fb5878d4e6 <unknown>\nE       #5 0x55fb5878e17f <unknown>\nE       #6 0x55fb587b78f9 <unknown>\nE       #7 0x55fb588537c9 <unknown>\nE       #8 0x55fb58820292 <unknown>\nE       #9 0x55fb5884670c <unknown>\nE       #10 0x55fb58820063 <unknown>\nE       #11 0x55fb587ec328 <unknown>\nE       #12 0x55fb587ed491 <unknown>\nE       #13 0x55fb58cb142b <unknown>\nE       #14 0x55fb58cb52ec <unknown>\nE       #15 0x55fb58c98a22 <unknown>\nE       #16 0x55fb58cb5e64 <unknown>\nE       #17 0x55fb58c7cbef <unknown>\nE       #18 0x55fb58cd8558 <unknown>\nE       #19 0x55fb58cd8736 <unknown>\nE       #20 0x55fb58ce8e76 <unknown>\nE       #21 0x7f0dc94e31f5 <unknown>\n\n/usr/local/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException","steps":[],"attachments":[{"uid":"efb9c1bee09e258","name":"stdout","source":"efb9c1bee09e258.txt","type":"text/plain","size":957}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1743280003127,"stop":1743280003130,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"UI 테스트"},{"name":"story","value":"카테고리 기능 테스트"},{"name":"parentSuite","value":"src.tests.ui_tests"},{"name":"suite","value":"test_ui_category"},{"name":"host","value":"08d1e8e1efcb"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.ui_tests.test_ui_category"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"8ed0fdaa6e2c8c47.json","parameterValues":[]}