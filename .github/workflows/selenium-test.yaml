name: Selenium Test Automation

on:
  pull_request:
    branches:
      - develop
  workflow_dispatch:
  schedule:
    - cron: '0 */2 * * *' # 실행 시간 설정(UTC)
  push:
    branches:
      - main

concurrency:  #동시에 여러 개의 배포 실행 방지
  group: gh-pages-deploy
  cancel-in-progress: true

jobs:
  selenium-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python #파이썬 설치
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create virtual environment
        run: python -m venv venv

      - name: Install Dependencies #의존성 설치
        run: venv/bin/python -m pip install -r requirements.txt allure-pytest


      - name: Install Allure CLI # Allure CLI 설치, allure 실행을 위해 필요
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://github.com/allure-framework/allure2/releases/download/2.32.2/allure-2.32.2.tgz
          tar -zxvf allure-2.32.2.tgz
          sudo mv allure-2.32.2 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          

      - name: Clean previous Allure results #기존 allure-results 삭제
        run: |
          rm -rf allure-results || true


      - name: Run Selenium Tests #테스트 실행
        run: |
          venv/bin/python -m pytest src/tests/ui_tests --alluredir=$(pwd)/allure-results
        continue-on-error: true


      - name: Debug Allure Results  #테스트 결과 확인
        run: ls -al allure-results || true


      - name: Preserve Allure History  # 기존 결과 유지
        run: |
          mkdir -p allure-report/history
          cp -r allure-history/* allure-report/history || true      
          

      - name: Generate Allure Report
        run: |
          allure generate allure-results -o allure-report --clean
          mkdir -p allure-report/history
          cp -r allure-history/* allure-report/history || true
          

      - name: Debug Allure Report #리포트 생성 확인
        run: |
          ls -al allure-report || true  
          

      - name: Force Update GitHub Pages  #  강제 변경 사항 추가
        run: |
          echo $(date) > allure-report/timestamp.txt
          

      - name: Upload Allure Report to GitHub Pages #리포트 업로드
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report #현재 디렉토리 내의 모든 파일을 업로드
          keep_files: false

      - name: Copy Screenshots to Allure Results
        run: |
          mkdir -p allure-results/screenshots
          cp -r screenshots/* allure-results/screenshots || true
              

      - name: Send Slack Notification # Slack 알람
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.QA_SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "GitHub Actions"
          SLACK_ICON_EMOJI: ":robot_face:"
          SLACK_TITLE: "✅ Selenium Test 완료"
          SLACK_MESSAGE: |
            *📢 Selenium UI 테스트가 끝났습니다!*
            *📄 Allure Report *: <https://yoplekiller.github.io/QATEST/allure-report/index.html>
            ⚠ GitHub Pages 반영까지 시간이 걸릴 수 있습니다. 404 발생 시 잠시 후 다시 확인하세요.
          SLACK_COLOR: "#36a64f"
