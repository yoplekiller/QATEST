name: Selenium Test Automation
on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - feature/*
      - temp/*
  workflow_dispatch:
#  schedule:
#    - cron: '0 */8 * * *' # 실행 시간 설정(UTC)

concurrency:  # 동시에 여러 개의 배포 실행 방지
  group: gh-pages-deploy
  cancel-in-progress: true

jobs:
  selenium_api_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python # 파이썬 설치
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"


      - name: Install Dependencies # 의존성 설치
        run: |
          python -m venv venv
          venv/bin/python -m pip install -r requirements.txt allure-pytest

      - name: Clean previous Allure results # 기존 allure-results 삭제
        run: rm -rf allure-results || true


      - name: Install Allure CLI # Allure CLI 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://github.com/allure-framework/allure2/releases/download/2.32.2/allure-2.32.2.tgz
          tar -zxvf allure-2.32.2.tgz
          sudo mv allure-2.32.2 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version
          
      - name: Fetch Allure Report from gh-pages
        run: |
          git fetch origin gh-pages
          mkdir -p allure-report
          git checkout gh-pages -- allure-report || true
          ls -al allure-report || echo "❌ allure-report 디렉토리가 없습니다!"
          
      - name: Force Update GitHub Pages
        run: echo $(date) > allure-report/timestamp.txt


      - name: Clean previous Allure results # 기존 allure-results 삭제
        run: rm -rf allure-results allure-report || true

      - name: Set API Key Environment Variable
        run: echo "TMDB_API_KEY=${{ secrets.TMDB_API_KEY }}" >> $GITHUB_ENV


      - name: Run Selenium Tests # 테스트 실행
        run: |
          mkdir -p allure-results
          venv/bin/python -m pytest src/tests/ui_tests --alluredir=allure-results --capture=tee-sys -v --maxfail=7 --disable-warnings --tb=short --junitxml=report.xml
        continue-on-error: true


      - name: Run API Tests
        run: |
          venv/bin/python -m pytest src/tests/api_tests --alluredir=allure-results --capture=tee-sys -v --maxfail=7 --disable-warnings --tb=short --junitxml=report.xml
        continue-on-error: true


      - name: Debug allure-results content
        run: |
           echo "🧾 allure-results 디렉토리 내용:"
           ls -al allure-results || echo '❌ 결과 파일 없음!'
          


      - name: Check Allure 디렉토리 사이즈
        run: du -sh allure-results || echo "❌ 디렉토리 없음"

      - name: Clone gh-pages
        run: |
          git fetch origin gh-pages
          git checkout gh-pages || git checkout --orphan gh-pages
          

      - name: Generate Allure Report
        run: |
          mkdir -p allure-report
          allure generate allure-results -o allure-report --clean || echo "❌ Allure report 생성 실패!"
          mkdir -p allure-report/history
          ls -al allure-report || echo "❌ allure-report 폴더가 없습니다!"
          

      - name: 🧹 Remove Heavy Allure Attachments
        run: |
          echo "🧹 스크린샷 및 컨테이너 파일 삭제 중..."
          find allure-results -type f \( -iname "*.png" -o -iname "*-attachment.txt" -o -iname "*-container.json" \) -exec rm -f {} +
          
          

      - name: Set Slack Webhook Env
        run: echo "SLACK_WEBHOOK_URL=${{ secrets.QA_SLACK_WEBHOOK_URL }}" >> $GITHUB_ENV

      - name: Install Python Dependencies for Excel Report
        run: |
          pip install pandas openpyxl requests
          

      - name: Generate Excel Report and Upload to Slack
        run: python src/report/generate_excel_report.py


      - name: 백업 이전 결과 정리
        run: |
          today=$(date +'%Y-%m-%d')
          mkdir -p backup/reports/$today
          mkdir -p backup/screenshots/$today
          mv test-report_*.xlsx backup/reports/$today/ || echo "✅ 백업할 엑셀 없음"
          if [ -d failed_screenshots ]; then
          mv failed_screenshots/* backup/screenshots/$today/ || echo "✅ 백업할 스크린샷 없음"
          else
          echo "✅ failed_screenshots 폴더 없음"
          fi



      - name: Debug Allure Results  # 테스트 결과 확인
        run: ls -al allure-results || echo "❌ allure-results 디렉토리가 없습니다!"

      - name: Upload Excel Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: excel-test-report
          path: '**/test-report_*.xlsx'


      - name: Force Update GitHub Pages
        run: echo $(date) > allure-report/timestamp.txt


      - name: 결과물 복사
        run: |
          mkdir -p deploy_dir
          cp -r allure-report deploy_dir/


      - name: Upload Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./deploy_dir
          keep_files: false


      - name: Send Slack Test Summary
        run: |
          pip install requests
          python utils/send_slack_result.py
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.QA_SLACK_WEBHOOK_URL }}
