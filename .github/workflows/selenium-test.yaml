name: Selenium Test Automation

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *' # 실행 시간 설정(UTC)
  push:
    branches:
      - main
jobs:
  selenium-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python #파이썬 설치
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Create virtual environment
        run: python -m venv venv

      - name: Install Dependencies #의존성 설치
        run: venv/bin/python -m pip install -r requirements.txt allure-pytest


      - name: Install Allure CLI # Allure CLI 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://github.com/allure-framework/allure2/releases/download/2.32.2/allure-2.32.2.tgz
          tar -zxvf allure-2.32.2.tgz
          sudo mv allure-2.32.2 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          

      - name: Capture start time  #테스트 시작 시간
        id: start-time
        run: echo "start=$(date +%s)" >> $GITHUB_ENV


      - name: Clean previous Allure results
        run: rm -rf allure-results || true


      - name: Run Selenium Tests #테스트 실행
        run: |
          venv/bin/python -m pytest src/tests/ui_tests --alluredir=$(pwd)/allure-results
        continue-on-error: true

      - name: Load Allure Report History # 기존 Allure Report 히스토리 가져오기
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages



      - name: Capture end time and calculate duration #수행시간
        id: test-duration
        run: |
          end=$(date +%s)
          duration=$((end - ${{ env.start }}))
          echo "time=${duration}초" >> $GITHUB_ENV       
                 

      - name: Generate Allure Report
        run: |
          mkdir -p allure-results
          allure generate allure-results -o allure-report --clean
          cp -r gh-pages/allure-history allure-report/ || echo "No previous history found"
     

      - name: Upload Allure Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report


      - name: Upload Allure Report to GitHub Pages #리포트 업로드
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report #현재 디렉토리 내의 모든 파일을 업로드
          keep_files: true


      - name: Wait for GitHub Pages Deployment
        run: sleep 30


      - name: Send Slack Notification # Slack 알람
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.QA_SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "GitHub Actions"
          SLACK_ICON_EMOJI: ":robot_face:"
          SLACK_TITLE: "✅ Selenium Test 완료"
          SLACK_MESSAGE: |
            *📢 Selenium UI 테스트가 끝났습니다!*
            *📄 Allure Report (웹)*: <https://yoplekiller.github.io/QATEST/allure-report/index.html>
            *📂 Allure Report (다운로드)*:  <${{ env.ARTIFACT_URL }}>
            🕒 수행 시간: `${{ env.time }}`
            ⚠ GitHub Pages 반영까지 시간이 걸릴 수 있습니다. 404 발생 시 잠시 후 다시 확인하세요.
          SLACK_COLOR: "#36a64f"
