name: Docker Test Automation

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
#  schedule:
#    - cron: '0 */8 * * *' # 실행 시간 설정(UTC)
  #  push:
  #    branches:
  #      - main
jobs:
  docker-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Docker & Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and Start Containers
        run: |
          docker compose up -d
          sleep 10

      - name: Build Docker image
        run: |
          docker build -t test-runner .    


      - name: Install Allure CLI # Allure CLI 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://github.com/allure-framework/allure2/releases/download/2.32.2/allure-2.32.2.tgz
          tar -zxvf allure-2.32.2.tgz
          sudo mv allure-2.32.2 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          

      - name: Clean previous Allure results
        run: |
          rm -rf allure-results || true


      - name: Run Selenium Tests
        run: docker run --memory=6g --shm-size=4g test-runner pytest src/tests/ui_tests --html=docker_report.html --self-contained-html
        continue-on-error: true

      - name: Stop and Remove Containers
        if: always()
        run: docker compose down


      - name: Generate Allure Report
        run: |
          mkdir -p allure-report-docker
          allure generate allure-results -o allure-report --clean
          mkdir -p gh-pages/allure-history
          cp -r allure-report/history gh-pages/allure-history
     

      - name: Upload Allure Report to GitHub Pages #리포트 업로드
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report-docker #현재 디렉토리 내의 모든 파일을 업로드
          keep_files: true


      - name: Wait for GitHub Pages Deployment
        run: sleep 20


      - name: Send Slack Notification # Slack 알람
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.QA_SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "GitHub Actions"
          SLACK_ICON_EMOJI: ":robot_face:"
          SLACK_TITLE: "✅ Docker Test 완료"
          SLACK_MESSAGE: |
            *📢 Selenium UI 테스트가 끝났습니다!*
            *📄 리포트 확인*: <https://yoplekiller.github.io/QATEST/allure-report-docker/index.html>
            ⚠ GitHub Pages 반영까지 시간이 걸릴 수 있습니다. 404 발생 시 잠시 후 다시 확인하세요.
          SLACK_COLOR: "#36a64f"

      - name: Check available memory
        run: free -h
