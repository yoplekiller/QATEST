name: Docker Test Automation

on:
#  push:
#    branches:
#      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
#  schedule:
#    - cron: '0 */8 * * *' # 실행 시간 설정(UTC)

concurrency:             #동시에 여러 개의 배포 실행 방지
  group: gh-pages-deploy
  cancel-in-progress: false


jobs:
  docker-tests:
    runs-on: ubuntu-latest
    services:
      selenium-hub:
        image: selenium/hub:4.6.0
        ports:
          - 4444:4444

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3


      - name: Install Docker & Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and Start Containers
        run: |
          docker compose up -d
          sleep 10

      - name: Build Docker image
        run: |
          docker build -t test-runner .

      - name: Remove old container if exists
        run: docker rm -f test-runner || true

      - name: Run Docker container
        run: |
          docker run -dit \
            --name test-runner \
            -v ${{ github.workspace}}/allure-results/docker:/app/allure-results \
            -e TMDB_API_KEY=${{ secrets.TMDB_API_KEY }} \
            test-runner

      - name: Run Docker Selenium Tests
        run: |
          mkdir -p allure-results
          docker exec test-runner pytest src/tests/ui_tests --alluredir=/app/allure-results --junitxml=ui_report.xml --capture=tee-sys -v || true 

      - name: Run API Tests
        run: |
          docker exec test-runner pytest src/tests/api_tests --alluredir=/app/allure-results --capture=tee-sys -v --maxfail=7 --disable-warnings --tb=short --junitxml=api_report.xml


      - name: Set proper permissions
        run: sudo chmod -R 777 allure-results || true

      - name: 🧹 Remove Heavy Allure Attachments
        run: |
          find allure-results -name "*-attachment.png" -delete
          find allure-results -name "*-attachment.txt" -delete
          find allure-results -name "*-container.json" -delete

      - name: Capture start time
        id: start-time
        run: echo "start=$(date +%s)" >> $GITHUB_ENV


      - name: Stop and Remove Containers
        if: always()
        run: docker compose down


      - name: Install Allure CLI # Allure CLI 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://github.com/allure-framework/allure2/releases/download/2.32.2/allure-2.32.2.tgz
          tar -zxvf allure-2.32.2.tgz
          sudo mv allure-2.32.2 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version


      - name: Generate Allure Report
        run: |
          mkdir -p allure-report/docker
          allure generate allure-results/docker -o allure-report/docker --clean || echo "❌ Report 생성 실패"

      - name: Set Slack Webhook Env
        run: echo "SLACK_WEBHOOK_URL=${{ secrets.QA_SLACK_WEBHOOK_URL }}" >> $GITHUB_ENV

      - name: Install Python Dependencies for Excel Report
        run: |
          pip install pandas openpyxl requests

      - name: Generate Excel Report and Upload to Slack
        run: python src/report/generate_excel_report.py

      - name: 백업 이전 결과 정리
        run: |
          today=$(date +'%Y-%m-%d')
          mkdir -p backup/reports/$today
          mkdir -p backup/screenshots/$today
          mv test-report_*.xlsx backup/reports/$today/ || echo "✅ 백업할 엑셀 없음"
          if [ -d failed_screenshots ]; then
          mv failed_screenshots/* backup/screenshots/$today/ || echo "✅ 백업할 스크린샷 없음"
          else
          echo "✅ failed_screenshots 폴더 없음"
          fi 
        
        

      - name: Upload Excel Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: excel-test-report
          path: '**/test-report_*.xlsx'

      - name: Force Update GitHub Pages
        run: echo $(date) > allure-report/timestamp.txt

      - name: 결과물 복사
        run: |
          mkdir -p deploy_dir
          cp -r allure-report deploy_dir/


      - name: Upload Allure report to Github Pages #리포트 업로드
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: deploy_dir
          destination_dir: .
          keep_files: false #기존파일 유지


      - name: Send Slack Test Summary
        run: |
          pip install requests
          python utils/send_slack_result.py
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.QA_SLACK_WEBHOOK_URL }}

      - name: Check available memory
        run: free -h
